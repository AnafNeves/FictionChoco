---
title: "BAIT"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
execute: 
  cache: false
---


```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(ggdist)
library(brms)
```


## BAIT Questionnaire

### Data Preparation


```{r}
df1 <- read.csv("https://raw.githubusercontent.com/RealityBending/FakeFace/refs/heads/main/data/data.csv") |> 
  select(Participant, Age, Sex, Date, starts_with("AI_")) |> 
  rename(
    # I think current Artificial Intelligence algorithms can generate very realistic images
    BAIT_ImagesRealistic = AI_1_RealisticImages,
    # Organisations use Artificial Intelligence unethically
    BAIT_Unethical = AI_2_Unethical,
    # I think videos generated by Artificial Intelligence are impossible to distinguish from real videos
    BAIT_VideosReal = AI_3_VideosReal,
    # I am interested in using artificially intelligent systems in my daily life
    BAIT_DailyLife = AI_4_DailyLife,
    # I think Computer-Generated Imagery (CGI) software is capable of perfectly imitating reality
    BAIT_ImitatingReality = AI_5_ImitatingReality,
    # I think Artificial Intelligence is dangerous
    BAIT_Dangerous = AI_6_Dangerous,
    # I think current Artificial Intelligence algorithms can generate very realistic videos
    BAIT_VideosRealistic = AI_7_RealisticVideos,
    # Artificial Intelligence is exciting
    BAIT_Exciting = AI_8_Exciting,
    # There are many beneficial applications of Artificial Intelligence
    BAIT_Applications = AI_9_Applications,
    # Images of faces or people generated by Artificial Intelligence will contain errors
    BAIT_FaceErrors = AI_10_FaceErrors
    )
df1 <- df1[!duplicated(df1), ]
```


```{r}
df2 <- read.csv("https://raw.githubusercontent.com/RealityBending/FictionEro/refs/heads/main/study1/data/data_participants.csv") |> 
  select(Participant, Age, Sex, Date, starts_with("BAIT_"), starts_with("GAAIS_"), -ends_with("Duration"),
         -BAIT_Text, -BAIT_Visual, -BAIT_Videos) |> 
  rename(
    # Artificial Intelligence might take control of people
    BAIT_Control = GAAIS_Negative_9,
    # Artificial Intelligence is dangerous
    BAIT_Dangerous = GAAIS_Negative_10,
    # I am worried about future uses of Artificial Intelligence
    BAIT_Worry = GAAIS_Negative_15,
    # I am interested in using artificially intelligent systems in my daily life
    BAIT_DailyLife = GAAIS_Positive_7,
    # Artificial Intelligence is exciting
    BAIT_Exciting = GAAIS_Positive_12,
    # Much of society will benefit from a future full of Artificial Intelligence
    BAIT_Benefit = GAAIS_Positive_17,
    # Current Artificial Intelligence algorithms can generate very realistic images
    BAIT_ImagesRealistic = BAIT_1_ImagesRealistic,
    # Images of faces or people generated by Artificial Intelligence always contain errors and artifacts
    BAIT_ImagesIssues = BAIT_2_ImagesIssues,
    # Videos generated by Artificial Intelligence have obvious problems that make them easy to spot as fake
    BAIT_VideosIssues = BAIT_3_VideosRealistic, # NOTE: WRONG LABEL IN DATA
    # Current Artificial Intelligence algorithms can generate very realistic videos
    BAIT_VideosRealistic = BAIT_4_VideosIssues,
    # Computer-Generated Images (CGI) are capable of perfectly imitating reality
    BAIT_ImitatingReality = BAIT_5_ImitatingReality,
    # Technology allows the creation of environments that seem just as real as reality
    BAIT_EnvironmentReal = BAIT_6_EnvironmentReal, 
    # Artificial Intelligence assistants can write texts that are indistinguishable from those written by humans
    BAIT_TextRealistic = BAIT_7_TextRealistic,
    # Documents and paragraphs written by Artificial Intelligence usually read differently compared to Human productions
    BAIT_TextIssues = BAIT_8_TextIssues
    )
```

```{r}
df3 <- read.csv("https://raw.githubusercontent.com/RealityBending/FakeFace2/refs/heads/main/data/data_participants.csv") |> 
  select(Participant, Age, Sex=Gender, Date, starts_with("BAIT_"), -ends_with("Duration")) |> 
  rename(
    # Current AI algorithms can generate very realistic images
    BAIT_ImagesRealistic = BAIT_1_ImagesRealistic,
    # Images of faces or people generated by AI always contain errors and artifacts
    BAIT_ImagesIssues = BAIT_2_ImagesIssues,
    # Videos generated by AI have obvious problems that make them easy to spot as fake
    BAIT_VideosIssues = BAIT_3_VideosRealistic,  # NOTE: WRONG LABEL IN DATA
    # Current AI algorithms can generate very realistic videos
    BAIT_VideosRealistic = BAIT_4_VideosIssues,
    # Computer-Generated Images (CGI) are capable of perfectly imitating reality
    BAIT_ImitatingReality = BAIT_5_ImitatingReality,
    # Technology allows the creation of environments that seem just as real as reality
    BAIT_EnvironmentReal = BAIT_6_EnvironmentReal,
    # AI assistants can write texts that are indistinguishable from those written by humans
    BAIT_TextRealistic = BAIT_7_TextRealistic,
    # Documents and paragraphs written by AI usually read differently compared to Human productions
    BAIT_TextIssues = BAIT_8_TextIssues,
    # AI is dangerous
    BAIT_Dangerous = BAIT_9_NegativeAttitutes,
    # I am worried about future uses of AI
    BAIT_Worry = BAIT_10_NegativeAttitutes,
    # AI is exciting
    BAIT_Exciting = BAIT_11_PositiveAttitutes,
    # Much of society will benefit from a future full of AI
    BAIT_Benefit = BAIT_12_PositiveAttitutes,
    # How knowledgeable do you consider yourself about Artificial Intelligence (AI) technology?
    BAIT_Expertise = BAIT_AI_Knowledge
    )
```

### EGA

::: {.panel-tabset}

#### Sample 1

```{r}
uva <- EGAnet::UVA(data = select(df1, starts_with("BAIT")), cut.off = 0.4)
uva
uva$keep_remove
```

```{r}
ega <- EGAnet::bootEGA(
  data = select(df1, starts_with("BAIT")),
  seed=123,
  model="glasso",
  algorithm="leiden",
  EGA.type="riEGA",
  type="resampling",
  plot.typicalStructure=FALSE,
  verbose=FALSE)

plot(ega$EGA)

make_table <- function(ega) {
  EGAnet::net.loads(ega$EGA)$std |> 
  as.data.frame() |> 
  rownames_as_column("Item") |> 
  gt::gt() |> 
  gt::data_color(
    method = "numeric",
    palette = c("red", "white", "green"),
    domain = c(-1, 1)
  ) |> 
  gt::fmt_number(decimals = 2)
}
make_table(ega)
```

#### Sample 2

```{r}
uva <- EGAnet::UVA(data = select(df2, starts_with("BAIT")), cut.off = 0.4)
uva
uva$keep_remove
```

```{r}
ega <- EGAnet::bootEGA(
  data = select(df2, starts_with("BAIT")),
  seed=123,
  model="glasso",
  algorithm="leiden",
  EGA.type="riEGA",
  type="resampling",
  plot.typicalStructure=FALSE,
  verbose=FALSE)

plot(ega$EGA)

make_table(ega)
```

#### Sample 3

```{r}
uva <- EGAnet::UVA(data = select(df3, starts_with("BAIT")), cut.off = 0.4)
uva
uva$keep_remove
```

```{r}
ega <- EGAnet::bootEGA(
  data = select(df3, starts_with("BAIT")),
  seed=123,
  model="glasso",
  algorithm="leiden",
  EGA.type="riEGA",
  type="resampling",
  plot.typicalStructure=FALSE,
  verbose=FALSE)

plot(ega$EGA)

make_table(ega)
```

:::

## CHOCO Model

### Data Preparation

```{r}
#| message: false
#| warning: false

options(mc.cores = parallel::detectCores() - 2)

library(tidyverse)
library(easystats)
library(patchwork)
library(brms)

# source("https://raw.githubusercontent.com/RealityBending/BAIT/refs/heads/main/functions/choco.R")
source("../functions/choco.R")
```


### Analysis

::: {.panel-tabset}

#### Sample 1

```{r}
df <- read.csv("https://raw.githubusercontent.com/RealityBending/FakeFace/refs/heads/main/data/data.csv")
df$Real <- (df$Belief_Answer + 1) / 2  # Rescale
df$Item <- gsub(".jpg", "", df$Stimulus)
df <- df[c("Participant", "Item", "Real")]

# df <- df[df$Participant %in% unique(df$Participant)[1:20],]
```

```{r}
p1 <- df |> 
  ggplot(aes(x = Real)) +
  geom_histogram(fill = "blue", bins = 100) +
  scale_y_sqrt()


# p1 + geom_histogram(
#   data=data.frame(Real = rchoco(nrow(df), mu = plogis(0.4), muleft = plogis(0), phileft = 3, kleft = plogis(1.4), kd=0.3)),
#   alpha = 0.3, position = "identity", fill = "black", bins = 100)
```

##### Model

```{r}
#| eval: false

# Define formula and priors
f <- bf(
  Real ~ 0 + Intercept + (0 + Intercept | Participant),
  muleft ~ 0 + Intercept,
  phileft ~ 0 + Intercept,
  kleft ~ 0 + Intercept + (0 + Intercept | Participant),
  mud = 0,
  phid = 0,
  kd = 0,
  family = choco7d(link_mu = "logit", link_muleft = "logit", link_mud = "identity",
                   link_phileft = "softplus", link_phid = "identity",
                   link_kleft = "logit", link_kd = "identity")
)

# Define priors (brms::default_prior(f, data=df))
priors <- c(
  # prior("normal(0, 1)", class = "sd", lb = 0),
  prior("normal(0, 1)", class = "sd", coef = "", dpar = "", group = "Participant", lb = 0),
  prior("normal(0, 1)", class = "sd", coef = "", dpar = "kleft", group = "Participant", lb = 0),
  prior("normal(0, 0.5)", class = "b", coef = "Intercept"),
  prior("normal(0, 0.3)", class = "b", coef = "Intercept", dpar = "muleft"),
  prior("normal(3, 0.3)", class = "b", coef = "Intercept", dpar = "phileft"),
  prior("normal(1, 0.5)", class = "b", coef = "Intercept", dpar = "kleft")
) |> brms::validate_prior(formula = f, data = df)

# plot(seq(0, 10, length.out = 100), dgamma(seq(0, 10, length.out = 100), shape = 3, scale = 1))

# Fit the model
m1 <- brm(
  formula = f,
  data = df,
  prior = priors,
  family = choco7d(),
  stanvars = choco_stanvars("choco7d"),
  algorithm = "sampling",
  chains = 4,
  iter = 500,
  backend = "cmdstanr"
)

save(m1, file = "models/m1.RData")
```

```{r}
load("models/m1.RData")

# Summary and posterior predictive check
summary(m1)

insight::get_predicted(m1, predict = "prediction", iterations = 100) |>
  as.data.frame() |>
  cbind(df) |>
  bayestestR::reshape_iterations() |>
  ggplot(aes(x = iter_value)) +
  geom_histogram(data = df, aes(x = Real), fill = "blue", bins = 100) +
  geom_histogram(aes(group = iter_group), alpha = 0.02, fill = "black", bins = 100, position = "identity") +
  scale_y_sqrt()


g1 <- modelbased::estimate_grouplevel(m1)
plot(g1)
# performance::performance_dvour(g1)
```

##### Empirical

```{r}
features <- df |> 
  summarize(Empirical_pright = sum(Real > 0.5) / n(), 
            Empirical_conf = mean(abs(Real - 0.5) * 2),
            Empirical_pextreme = sum(Real %in% c(0, 1)) / n(),
            .by = "Participant") |> 
  full_join(reshape_grouplevel(g1, indices = "Median"), by = "Participant") |> 
  mutate(Sample = "Sample1")
```

##### Correlation

```{r}
correlation::correlation(features) |> 
  summary() |> 
  plot()
```

:::




