---
title: "Analysis 2 - Models"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
execute: 
  cache: false
---


```{r}
#| message: false
#| warning: false

options(mc.cores = parallel::detectCores() - 2)

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(ggdist)
library(brms)
```


## Sample 1

### Data Preprocessing

```{r}
df <- read.csv("https://raw.githubusercontent.com/RealityBending/FakeFace/refs/heads/main/data/data.csv") |> 
  mutate(Real = (Belief_Answer + 1) / 2,  # Rescale
         Orientation = ifelse(Sexual_Orientation == "Straight ", "Heterosexual", Sexual_Orientation),
         Item = gsub(".jpg", "", Stimulus)) |> 
  filter(Sex %in% c("Male", "Female"), Orientation %in% c("Heterosexual", "Bisexual", "Homosexual")) |> 
  mutate(Relevance = case_when(
    Sex == "Male" & Orientation == "Heterosexual" & grepl("NF", Stimulus) ~ "Relevant",
    Sex == "Female" & Orientation == "Heterosexual" & grepl("NM", Stimulus) ~ "Relevant",
    Sex == "Male" & Orientation == "Bisexual" & grepl("NF", Stimulus) ~ "Relevant",
    Sex == "Female" & Orientation == "Bisexual" & grepl("NM", Stimulus) ~ "Relevant",
    Sex == "Male" & Orientation == "Homosexual" & grepl("NM", Stimulus) ~ "Relevant",
    Sex == "Female" & Orientation == "Homosexual" & grepl("NF", Stimulus) ~ "Relevant",
    .default = "Irrelevant"
  )) |> 
  filter(Relevance == "Relevant") |> 
  select(Participant, Sex, Item, Real, Attractive, Beauty)

# Nudge mid-values to avoid model fitting issues
df$Real[df$Real == 0.5] <- sample(c(0.4999, 0.5001), sum(df$Real == 0.5), replace = TRUE)  # Avoid 0.5

write.csv(df, "../data/sample1.csv", row.names = FALSE)
```


### Models 

::: {.panel-tabset}


```{r}
p1 <- df |> 
  ggplot(aes(x = Real)) +
  geom_histogram(fill = "blue", bins = 100) +
  scale_y_sqrt()


# p1 + geom_histogram(
#   data=data.frame(Real = rchoco(nrow(df), mu = plogis(0.4), muleft = plogis(0), phileft = 3, kleft = plogis(1.4), kd=0.3)),
#   alpha = 0.3, position = "identity", fill = "black", bins = 100)
```



#### Empirical

```{r}
features1 <- df |> 
  summarize(Sample = "Sample1", 
            Empirical_pright = sum(Real > 0.5) / n(), 
            Empirical_conf = mean(abs(Real - 0.5) * 2),
            Empirical_pex = sum(Real %in% c(0, 1)) / n(),
            Empirical_mean = mean(Real),
            .by = "Participant") 
```


#### ZOIB


```{r}
m1_zoib <- readRDS("models/sample1_zoib.rds")

# performance::r2(m1_zoib)

make_ppcheck  <- function(m, fill = "#FF9800") {
  pred <- m |> 
    insight::get_predicted(data = df[sample(nrow(df), 1000, replace = FALSE), ], 
                           predict="prediction", iterations = 100) |>
    bayestestR::reshape_iterations() 
  
  pred |>
    ggplot(aes(x = iter_value)) +
    stat_bin(aes(group = iter_group, y = after_stat(count / max(count))), position = "identity",
             geom="bar", breaks = seq(-0.005, 1.005, by = 0.01), pad = TRUE,
             alpha = 0.01, fill = fill) + 
    stat_bin(data = df, aes(x = Real, y = after_stat(count / max(count))), 
             geom="step", breaks = seq(-0.01, 1.0, by = 0.01),  pad = TRUE, 
             linewidth = 1, color = "#9C27B0") + 
    scale_y_sqrt() +
    scale_x_continuous(expand = c(0, 0)) +
    theme_minimal() 
}

p1_zoib <- make_ppcheck(m1_zoib, fill = "#FF9800")
p1_zoib
```



```{r}
g1_zoib <- modelbased::estimate_grouplevel(m1_zoib)
plot(g1_zoib)

features1 <- reshape_grouplevel(g1_zoib, indices = "Median", group = "Participant") |> 
  datawizard::data_addprefix("ZOIB_", exclude = "Participant") |> 
  full_join(features1, by = "Participant") 

# modelbased::estimate_grouplevel(insight::download_model("brms_chocomini_1"))
# modelbased::estimate_grouplevel(insight::download_model("brms_chocomini_1"), type = "total")
# performance::performance_dvour(g1)
```



#### BEXT


```{r}
m1_bext <- readRDS("models/sample1_bext.rds")

p1_bext <- make_ppcheck(m1_bext, fill = "#FF5722")
p1_bext
```



```{r}
g1_bext <- modelbased::estimate_grouplevel(m1_bext)
plot(g1_bext)

features1 <- reshape_grouplevel(g1_bext, indices = "Median", group = "Participant") |> 
  datawizard::data_addprefix("BEXT_", exclude = "Participant") |> 
  full_join(features1, by = "Participant") 
```


#### CHOCO


```{r}
m1_choco <- readRDS("models/sample1_choco.rds")

p1_choco <- make_ppcheck(m1_choco, fill = "#795548")
p1_choco
```



```{r}
g1_choco <- modelbased::estimate_grouplevel(m1_choco)
plot(g1_choco)

performance::performance_dvour(g1_choco) |> 
  arrange(desc(D_vour))

features1 <- reshape_grouplevel(g1_choco, indices = "Median", group = "Participant") |> 
  datawizard::data_addprefix("CHOCO_", exclude = "Participant") |> 
  full_join(features1, by = "Participant") 
```


:::


### Model Comparison


#### Correlation

```{r}
p1_zoib | p1_bext | p1_choco
```

```{r}
correlation::correlation(select(features1, -starts_with("Empirical_"), -Participant, -Sample), 
                         select(features1, starts_with("Empirical_")), 
                         p_adjust = "none") |> 
  summary() |> 
  plot()
```

#### Clusters

```{r}
# features1 |> 
#   ggplot(aes(x = muleft_Intercept, y = mud_Intercept)) +
#   geom_point(size = 2) 

selected_features <- select(features1, contains("Intercept"))

parameters::n_clusters(selected_features)

rez <- parameters::cluster_analysis(selected_features, 
                             method = "hkmeans", 
                             n = 3) 
plot(rez)
features1$Cluster <- paste0("C", predict(rez))

summary(lm(Realism ~ Cluster, data = features1))
summary(lm(Exciting ~ Cluster, data = features1))
```

#### Moderators

```{r}
dfsub <- read.csv("../data/features_ega.csv") |> 
  full_join(features1, by = c("Participant", "Sample"))

dfsub1 <- select(filter(dfsub, Sample == "Sample1"), -Participant, -Sample)
correlation::correlation(select(dfsub1, -Realism, -Exciting), 
                         select(dfsub1, Realism, Exciting), 
                         p_adjust = "none") |> 
  summary() |> 
  plot()
```

```{r}
m1 <- lm(Realism ~ ., data = select(dfsub1, Realism, starts_with("Empirical_")))
m2 <- lm(Realism ~ ., data = select(dfsub1, Realism, starts_with("ZOIB_"))) 
m3 <- lm(Realism ~ ., data = select(dfsub1, Realism, starts_with("BEXT_")))
m4 <- lm(Realism ~ ., data = select(dfsub1, Realism, starts_with("CHOCO_")))

performance::test_performance(m1, m2, m3, m4)
performance::test_vuong(m1, m2, m3, m4)
r2(m1)
r2(m2)
r2(m3)
r2(m4)
summary(m4)
```


### Attractiveness


```{r}
m1_chocoat <- readRDS("models/sample1_chocoattractiveness.rds")

p1_chocoat <- make_ppcheck(m1_chocoat, fill = "#795548")
p1_chocoat
```


```{r}
performance::performance_dvour(m1_chocoat) |> 
  arrange(desc(D_vour))
```


```{r}
m1_chocoat <- readRDS(url("https://raw.github.com/DominiqueMakowski/cogmod/main/man/figures/m_zoib.rds"))
f <- bf(
  Real ~ 0 + Intercept + Attractive,
  phi ~ 0 + Intercept + Attractive,
  zoi ~ 0 + Intercept + Attractive,
  coi ~ 0 + Intercept + Attractive
)

m1_chocoat <- brm(f,
  data = df[1:1000,], family = zero_one_inflated_beta(), init = 0,
  chains = 4, iter = 500, backend = "cmdstanr"
)

estimate_relation(m1_chocoat, predict = "phi")
# modelbased::estimate_slopes(m1_chocoat, trend = c("Attractive")) 

```




## Sample 2


### Models 


```{r}
df <- read.csv("https://raw.githubusercontent.com/RealityBending/FakeFace2/refs/heads/main/data/data_task.csv")
df$Real <- (df$Realness + 1) / 2  
df <- df[c("Participant", "Item", "Real", "Attractive", "Beauty")]
```

```{r}
p1 <- df |> 
  ggplot(aes(x = Real)) +
  geom_histogram(fill = "blue", bins = 100) +
  scale_y_sqrt()


# p1 + geom_histogram(
#   data=data.frame(Real = rchoco(nrow(df), mu = plogis(0.4), muleft = plogis(0), phileft = 3, kleft = plogis(1.4), kd=0.3)),
#   alpha = 0.3, position = "identity", fill = "black", bins = 100)
```
